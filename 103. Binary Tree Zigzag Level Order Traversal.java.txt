/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        
        if(root == null) return result;
        
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        
        queue.add(root);
        
        while(!queue.isEmpty()){
            
            Queue<TreeNode> temp = new LinkedList<TreeNode>();
            List<Integer> list = new ArrayList<Integer>();
            
            while(!queue.isEmpty()){
                
                TreeNode node = queue.poll();
                list.add(node.val);
                
                if(node.left!=null){
                    temp.add(node.left);
                }
                
                if(node.right!=null){
                    temp.add(node.right);
                }
            }
            
            result.add(list);
            queue = temp; 
        }
        
        for(int i=0; i<result.size(); i++){
            if(i%2 != 0){
                Collections.reverse(result.get(i));
            }
        }
        
        return result;
    }
}