/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        
        Stack<TreeNode> stack1 = new Stack<TreeNode>();
        Stack<TreeNode> stack2 = new Stack<TreeNode>();
        
        List<Integer> list1 = new ArrayList<Integer>();
        List<Integer> list2 = new ArrayList<Integer>();
        
        stack1.push(root1);
        while(!stack1.isEmpty()){
            
            TreeNode node = stack1.pop();
            
            if(node.left == null && node.right == null){
                list1.add(node.val);
            }

            if(node.left != null)
                stack1.push(node.left);
            if(node.right != null)
                stack1.push(node.right);       
        }
        
        stack2.push(root2);
        while(!stack2.isEmpty()){
            TreeNode node = stack2.pop();
            
            if(node.left == null && node.right == null){
                list2.add(node.val);
            }
            
            if(node.left != null)
                stack2.push(node.left);
            if(node.right != null)
                stack2.push(node.right);
                
        }
        return list1.equals(list2);
    }
}

//Optimized Solution on Leetcode

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        List<Integer> leaves1 = new ArrayList();
        List<Integer> leaves2 = new ArrayList();
        dfs(root1, leaves1);
        dfs(root2, leaves2);
        return leaves1.equals(leaves2);
    }

    public void dfs(TreeNode node, List<Integer> leafValues) {
        if (node != null) {
            if (node.left == null && node.right == null)
                leafValues.add(node.val);
            dfs(node.left, leafValues);
            dfs(node.right, leafValues);
        }
    }
}