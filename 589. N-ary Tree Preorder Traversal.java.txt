/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    
    List <Integer> list = new ArrayList<Integer>();
    
    public List<Integer> preorder(Node root) {
        //list = updateTreeRecursive(root);
        list = updateTreeIterative(root);
        return list;
    }
    
    public List<Integer> updateTreeRecursive(Node node){
        if(node == null)
            return list;
        
        list.add(node.val);
        List<Node> children = node.children;
        
        for(Node childNode: node.children){
            updateTreeRecursive(childNode);  
        }
        return list;
    }
    
    public List<Integer> updateTreeIterative(Node root){
        if(root == null)
            return list;
        
        Stack<Node> stack = new Stack<Node>();
        stack.push(root);
        
        while(!stack.empty()){
            
            Node temp = stack.pop();
            list.add(temp.val);
            
            List<Node> child = temp.children;
            
            for(int i=child.size()-1; i>=0;i--)
                stack.push(child.get(i));
            
        }
        return list;
    }
    
    
}