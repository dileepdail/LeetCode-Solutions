/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    
    List <Integer> list = new ArrayList<Integer>();
    
    public List<Integer> postorder(Node root) {
       if(root == null)
            return list;
        //list = postTraversalRecursive(root);
        list = postTraversalItirative(root);
        //list.add(root.val);
        return list;
    }
    
    public List<Integer> postTraversalRecursive(Node root){
        List<Node> children = root.children;
        for(Node node: children){
            postTraversalRecursive(node);
            list.add(node.val);
        }
        return list;
    }
    
    public List<Integer> postTraversalItirative(Node root){
        
        List<Integer> al = new ArrayList<Integer>();
        Stack<Node> stack = new Stack<Node>();
        
        stack.push(root);
        
        while(!stack.empty()){
            Node temp = stack.pop();
            al.add(temp.val);
            List<Node> children = temp.children;
            
            for(int i = 0; i< children.size(); i++){
                Node child = children.get(i);
                stack.push(child);
            }
        }
        for(int i=al.size()-1; i>=0; i--)
            list.add(al.get(i));
        return list;
    }
}