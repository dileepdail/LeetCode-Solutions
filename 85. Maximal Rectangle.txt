class Solution {
    public int maximalRectangle(char[][] matrix) {
        
        if(matrix.length == 0)
            return 0;
     
        int maxRec = 0;
        int[] dp = new int[matrix[0].length];
        
        
        for(int i=0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                if(matrix[i][j] == '0'){
                    dp[j] = 0;
                }else{
                    dp[j] = dp[j] + Character.getNumericValue(matrix[i][j]);
                }
            }
            
            maxRec = Math.max(maxRec,largestRectangleArea(dp));
        }
        
        return maxRec;
    }
    
    public int largestRectangleArea(int[] heights) {
        
        if(heights.length ==0) return 0;
        
        int largestArea = Integer.MIN_VALUE;
        
        int n = heights.length;
        
        int[] leftMin = new int[n];
        int[] rightMin = new int[n];
        
        leftMin[0] = 0;
        
        for(int i=1; i<n; i++){
            
            leftMin[i] =i;
            
            int j=i;
            
            while((leftMin[j]-1 >=0) && (heights[leftMin[j]-1] >= heights[i])){
                j = leftMin[j] - 1;
            }
            
            leftMin[i] = leftMin[j];
        }
        
        rightMin[n-1] = n-1;
        
        for(int i=n-2; i>=0; i--){
            
            rightMin[i] =i;
            
            int j=i;
            
            while((rightMin[j]+1 <= n-1) && (heights[rightMin[j]+1] >= heights[i])){
                j = rightMin[j] + 1;
            }
            
            rightMin[i] = rightMin[j];
        }
        
        
        for(int i=0; i<n; i++){
            
            int area = heights[i]*(rightMin[i]-leftMin[i] +1);
            
            largestArea = Math.max(largestArea, area);
        }
        return largestArea;
    }
}